var searchIndex = {};
searchIndex['interval_heap'] = {"items":[[0,"","interval_heap","A double-ended priority queue implemented with an interval heap.",null,null],[3,"IntervalHeap","","An `IntervalHeap` is an implementation of a double-ended priority queue.\nAs such, it supports the following operations: `push`, `min`,\n`max`, `pop_min`, `pop_max` where insertion takes amortized O(log n)\ntime, removal takes O(log n) time and accessing minimum and maximum can\nbe done in constant time. Also, other convenient functions are provided\nthat handle conversion from and into vectors and allow iteration etc.",null,null],[3,"Iter","","`IntervalHeap` iterator.",null,null],[3,"IntoIter","","A consuming iterator over a heap in arbitrary order.",null,null],[11,"clone","","",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"intervalheap"}}],[11,"default","","Returns an empty heap ordered according to a default comparator.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"intervalheap"}}],[11,"new","","Returns an empty heap ordered according to the natural order of its elements.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"intervalheap"}}],[11,"with_capacity","","Returns an empty heap with the given capacity and ordered according to the\nnatural order of its elements.",0,{"inputs":[{"name":"intervalheap"},{"name":"usize"}],"output":{"name":"intervalheap"}}],[11,"from_vec","","Returns a heap containing all the elements of the given vector and ordered\naccording to the natural order of its elements.",0,{"inputs":[{"name":"intervalheap"},{"name":"vec"}],"output":{"name":"intervalheap"}}],[11,"with_comparator","","Returns an empty heap ordered according to the given comparator.",0,{"inputs":[{"name":"intervalheap"},{"name":"c"}],"output":{"name":"intervalheap"}}],[11,"with_capacity_and_comparator","","Returns an empty heap with the given capacity and ordered according to the given\ncomparator.",0,{"inputs":[{"name":"intervalheap"},{"name":"usize"},{"name":"c"}],"output":{"name":"intervalheap"}}],[11,"from_vec_and_comparator","","Returns a heap containing all the elements of the given vector and ordered\naccording to the given comparator.",0,{"inputs":[{"name":"intervalheap"},{"name":"vec"},{"name":"c"}],"output":{"name":"intervalheap"}}],[11,"iter","","An iterator visiting all values in underlying vector,\nin arbitrary order.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"iter"}}],[11,"into_iter","","Returns a consuming iterator over the heap in arbitrary order.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"intoiter"}}],[11,"min","","Returns a reference to the smallest item or None (if empty).",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"option"}}],[11,"max","","Returns a reference to the greatest item or None (if empty).",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"option"}}],[11,"min_max","","Returns references to the smallest and greatest item or None (if empty).",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of items the interval heap could hold\nwithout reallocation.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements\nto be inserted in the given `IntervalHeap`. Does nothing if the capacity\nis already sufficient.",0,{"inputs":[{"name":"intervalheap"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `IntervalHeap`. The collection may reserve more space to avoid\nfrequent reallocations.",0,{"inputs":[{"name":"intervalheap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",0,{"inputs":[{"name":"intervalheap"}],"output":null}],[11,"pop_min","","Removes the smallest item and returns it, or None if is empty.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"option"}}],[11,"pop_max","","Removes the greatest item and returns it, or None if is empty.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the queue.",0,{"inputs":[{"name":"intervalheap"},{"name":"t"}],"output":null}],[11,"into_vec","","Consumes the `IntervalHeap` and returns the underlying vector\nin arbitrary order.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `IntervalHeap` and returns a vector in sorted\n(ascending) order.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of items in the interval heap",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the queue contains no items.",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"bool"}}],[11,"clear","","Drops all items from the queue.",0,{"inputs":[{"name":"intervalheap"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"intervalheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","Creates an interval heap with all the items from an iterator",0,{"inputs":[{"name":"intervalheap"},{"name":"i"}],"output":{"name":"intervalheap"}}],[11,"extend","","Extends the interval heap by a new chunk of items given by\nan iterator.",0,{"inputs":[{"name":"intervalheap"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","","",null,null],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",2,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","","",0,{"inputs":[{"name":"intervalheap"}],"output":{"name":"intoiter"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null]],"paths":[[3,"IntervalHeap"],[3,"Iter"],[3,"IntoIter"]]};
initSearch(searchIndex);
